package main

import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/rand"
	b64 "encoding/base64"
	"fmt"
	"log"
	"net/http"
)

func Index(w http.ResponseWriter, r *http.Request) {
	data := "PCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBYSFRNTCAxLjAgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL3hodG1sMS9EVEQveGh0bWwxLXRyYW5zaXRpb25hbC5kdGQiPgo8aHRtbCB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCI+PGhlYWQ+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PVVURi04Ij48L21ldGE+Cjx0aXRsZT5DcmVhdGUgYSBzZWNyZXQhPC90aXRsZT4KPHN0eWxlIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIG1lZGlhPSJhbGwiIGRhdGEtaHJlZj0iaHR0cDovL3d3dy5waHBmb3JtLm9yZy9mb3JtYnVpbGRlci9jb2xvcnMvY29sb3IyL3ZpZXcuY3NzIj5ib2R5CnsKCWJhY2tncm91bmQ6IzMzNjY5OTsKCWZvbnQtZmFtaWx5OiJMdWNpZGEgR3JhbmRlIiwgVGFob21hLCBBcmlhbCwgVmVyZGFuYSwgc2Fucy1zZXJpZjsKCWZvbnQtc2l6ZTpzbWFsbDsKCW1hcmdpbjo4cHggMCAxNnB4OwoJdGV4dC1hbGlnbjpjZW50ZXI7Cn0KCiNmb3JtX2NvbnRhaW5lcgp7CgliYWNrZ3JvdW5kOiNmZmY7CgkKCW1hcmdpbjowIGF1dG87Cgl0ZXh0LWFsaWduOmxlZnQ7Cgl3aWR0aDo2NDBweDsKfQoKI3RvcAp7CglkaXNwbGF5OmJsb2NrOwoJaGVpZ2h0OjEwcHg7CgltYXJnaW46MTBweCBhdXRvIDA7Cgl3aWR0aDo2NTBweDsKfQoKI2Zvb3Rlcgp7Cgl3aWR0aDo2NDBweDsKCWNsZWFyOmJvdGg7Cgljb2xvcjojOTk5OTk5OwoJdGV4dC1hbGlnbjpjZW50ZXI7Cgl3aWR0aDo2NDBweDsKCXBhZGRpbmctYm90dG9tOiAxNXB4OwoJZm9udC1zaXplOiA4NSU7Cn0KCiNmb290ZXIgYXsKCWNvbG9yOiM5OTk5OTk7Cgl0ZXh0LWRlY29yYXRpb246IG5vbmU7Cglib3JkZXItYm90dG9tOiAxcHggZG90dGVkICM5OTk5OTk7Cn0KCiNib3R0b20KewoJZGlzcGxheTpibG9jazsKCWhlaWdodDoxMHB4OwoJbWFyZ2luOjAgYXV0bzsKCXdpZHRoOjY1MHB4Owp9Cgpmb3JtLmFwcG5pdHJvCnsKCW1hcmdpbjoyMHB4IDIwcHggMDsKCXBhZGRpbmc6MCAwIDIwcHg7Cn0KCi8qKioqIExvZ28gU2VjdGlvbiAgKioqKiovCmgxCnsKCWJhY2tncm91bmQtY29sb3I6IzY2OTlDQzsKCW1hcmdpbjowOwoJbWluLWhlaWdodDowOwoJcGFkZGluZzowOwoJdGV4dC1kZWNvcmF0aW9uOm5vbmU7Cgl0ZXh0LWluZGVudDotODAwMHB4OwoJCn0KCmgxIGEKewoJCglkaXNwbGF5OmJsb2NrOwoJaGVpZ2h0OjEwMCU7CgltaW4taGVpZ2h0OjQwcHg7CglvdmVyZmxvdzpoaWRkZW47Cn0KCgppbWcKewoJYmVoYXZpb3I6dXJsKGRhdGE6dGV4dC9odG1sO2Jhc2U2NCxQQ0ZFVDBOVVdWQkZJR2gwYld3Z1VGVkNURWxESUNJdEx5OVhNME12TDBSVVJDQllTRlJOVENBeExqQWdWSEpoYm5OcGRHbHZibUZzTHk5RlRpSWdJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5MMVJTTDNob2RHMXNNUzlFVkVRdmVHaDBiV3d4TFhSeVlXNXphWFJwYjI1aGJDNWtkR1FpUGdvOGFIUnRiQ0I0Yld4dWN6MGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNVGs1T1M5NGFIUnRiQ0lnYkdGdVp6MGlaVzRpSUhodGJEcHNZVzVuUFNKbGJpSStJQW84YUdWaFpENEtDVHgwYVhSc1pUNVFZV2RsSUc1dmRDQm1iM1Z1WkNCOElGQklVRVp2Y20wZ0xTQlZiSFJwYldGMFpTQkdiM0p0SUVKMWFXeGthVzVuSUZKbGMyOTFjbU5sUEM5MGFYUnNaVDRLQ1R4dFpYUmhJR2gwZEhBdFpYRjFhWFk5SWtOdmJuUmxiblF0Vkhsd1pTSWdZMjl1ZEdWdWREMGlkR1Y0ZEM5b2RHMXNPeUJqYUdGeWMyVjBQWFYwWmkwNElpQXZQZ284YkdsdWF5QnlaV3c5SW5Ob2IzSjBZM1YwSUdsamIyNGlJR2h5WldZOUlpOTBhR1Z0WlhNdllYQndibWwwY204dlptRjJhV052Ymk1cFkyOGlJSFI1Y0dVOUltbHRZV2RsTDNndGFXTnZiaUlnTHo0S0lDQUpQSE4wZVd4bElIUjVjR1U5SW5SbGVIUXZZM056SWlCdFpXUnBZVDBpWVd4c0lqNUFhVzF3YjNKMElDSXZiVzlrZFd4bGN5OXViMlJsTDI1dlpHVXVZM056SWpzOEwzTjBlV3hsUGdvOGMzUjViR1VnZEhsd1pUMGlkR1Y0ZEM5amMzTWlJRzFsWkdsaFBTSmhiR3dpUGtCcGJYQnZjblFnSWk5dGIyUjFiR1Z6TDNONWMzUmxiUzlrWldaaGRXeDBjeTVqYzNNaU96d3ZjM1I1YkdVK0NqeHpkSGxzWlNCMGVYQmxQU0owWlhoMEwyTnpjeUlnYldWa2FXRTlJbUZzYkNJK1FHbHRjRzl5ZENBaUwyMXZaSFZzWlhNdmMzbHpkR1Z0TDNONWMzUmxiUzVqYzNNaU96d3ZjM1I1YkdVK0NqeHpkSGxzWlNCMGVYQmxQU0owWlhoMEwyTnpjeUlnYldWa2FXRTlJbUZzYkNJK1FHbHRjRzl5ZENBaUwyMXZaSFZzWlhNdmRYTmxjaTkxYzJWeUxtTnpjeUk3UEM5emRIbHNaVDRLUEhOMGVXeGxJSFI1Y0dVOUluUmxlSFF2WTNOeklpQnRaV1JwWVQwaVlXeHNJajVBYVcxd2IzSjBJQ0l2ZEdobGJXVnpMMkZ3Y0c1cGRISnZMM04wZVd4bExtTnpjeUk3UEM5emRIbHNaVDRLSUNBSlBHMWxkR0VnYm1GdFpUMGlkbWxsZDNCdmNuUWlJR052Ym5SbGJuUTlJbmRwWkhSb1BXUmxkbWxqWlMxM2FXUjBhQ3dnYVc1cGRHbGhiQzF6WTJGc1pUMHhJajRLUEd4cGJtc2djbVZzUFNKemRIbHNaWE5vWldWMElpQjBlWEJsUFNKMFpYaDBMMk56Y3lJZ2FISmxaajBpTDIxdlltbHNaUzVqYzNNaUlHMWxaR2xoUFNKaGJHd2lJQzgrQ2p3dmFHVmhaRDRLQ2p4aWIyUjVJR2xrUFNKa1pXWmhkV3gwWDNCaFoyVWlJR05zWVhOelBTSWlQZ29KQ1R4a2FYWWdhV1E5SW0xaGFXNWZZMjl1ZEdGcGJtVnlJajRLQ1FrSlBHUnBkaUJqYkdGemN6MGlkM0poY0hCbGNpSStDZ2tKQ1R4a2FYWWdhV1E5SW1obFlXUmxjaUkrQ2drOGFERStQR0VnYUhKbFpqMGlhSFIwY0RvdkwzZDNkeTV3YUhCbWIzSnRMbTl5WnlJZ2RHbDBiR1U5SWtGd2NHNXBkSEp2SUhCR2IzSnRJajRtYm1KemNEczhMMkUrUEM5b01UNEtDVHgxYkNBK0Nna0pDUWs4YkdrZ1kyeGhjM005SW1KMWRIUnZibDl6ZEdWd015SStDZ2tKQ1R4aFBpWnVZbk53T3p3dllUNEtDUWs4TDJ4cFBnb0pDUW9KUEM5MWJENEtQQzlrYVhZK0NRb0pDUWs4WkdsMklHbGtQU0pqYjI1MFpXNTBYM0p2YjNRaVBnb0pDUWtKUEdScGRpQmpiR0Z6Y3owaWQzSmhjSEJsY2lJK0Nna0pDUWtKUEdScGRpQnBaRDBpWTI5dWRHVnVkRjlvWldGa1pYSWlQZ29KQ1FrSkNRa21ibUp6Y0RzS0NRa0pDUWs4TDJScGRqNEtDUWtKQ1FrOFpHbDJJR2xrUFNKamIyNTBaVzUwWDJ4bFpuUWlJSE4wZVd4bFBTSjNhV1IwYURvZ056WXdjSGdpUGdvSkNRa0pDUWs4YURFZ1kyeGhjM005SW5ScGRHeGxJajVRWVdkbElHNXZkQ0JtYjNWdVpEd3ZhREUrQ1FvSkNRa0pDUWtnQ2drSkNRa0pDUWtKQ1FrSkNTQWdJQ0FnSUNBZ0NRa0pDUWtKQ1FrSkNRa0pDUWtKQ1NBZ0lDQWdJQ0FnQ1FrSkNRa0pDUWtKUEM5a2FYWStDZ2tKQ1FrSkNRa0pDVHd2WkdsMlBnb0pDUWs4TDJScGRqNEtDUWtKSUNBZ0lDQWdJQ0FKQ2p4a2FYWWdhV1E5SW1admIzUmxjaUkrQ2drSkNRazhhRFErQ2drSkNRa0pKbU52Y0hrN0lFTnZjSGx5YVdkb2RDQXlNREEzTFRJd01UVWdMU1p1WW5Od096eGhJR2h5WldZOUltaDBkSEE2THk5M2QzY3VZWEJ3Ym1sMGNtOHVZMjl0SWlCamJHRnpjejBpWkc5MGRHVmtYMnhwYm1zaUlITjBlV3hsUFNKamIyeHZjam9nSTJabVppSStSbTl5YlNCQ2RXbHNaR1Z5UEM5aFBpQXRJRUZ3Y0c1cGRISnZJRk52Wm5SM1lYSmxQQzl6ZEhKdmJtYytDZ2tKQ1FrOEwyZzBQZ29KQ1FrS0NRa0pDU1p1WW5Od093b0pDUWtKQ1FrSkNqd3ZaR2wyUGdvOElTMHRJRk4wWVhKMElHOW1JRk4wWVhSRGIzVnVkR1Z5SUVOdlpHVWdabTl5SUVSbFptRjFiSFFnUjNWcFpHVWdMUzArQ2p4elkzSnBjSFFnZEhsd1pUMGlkR1Y0ZEM5cVlYWmhjMk55YVhCMElqNEtkbUZ5SUhOalgzQnliMnBsWTNROU16QXdNamN5TmpzZ0NuWmhjaUJ6WTE5cGJuWnBjMmxpYkdVOU1Uc2dDblpoY2lCelkxOXpaV04xY21sMGVUMGlaVGxrWkRNMFpERWlPeUFLZG1GeUlITmpYMmgwZEhCelBURTdJQXAyWVhJZ2MyTmZjbVZ0YjNabFgyeHBibXM5TVRzZ0NuWmhjaUJ6WTBwelNHOXpkQ0E5SUNnb0ltaDBkSEJ6T2lJZ1BUMGdaRzlqZFcxbGJuUXViRzlqWVhScGIyNHVjSEp2ZEc5amIyd3BJRDhLSW1oMGRIQnpPaTh2YzJWamRYSmxMaUlnT2lBaWFIUjBjRG92TDNkM2R5NGlLVHNLWkc5amRXMWxiblF1ZDNKcGRHVW9Janh6WXlJckluSnBjSFFnZEhsd1pUMG5kR1Y0ZEM5cVlYWmhjMk55YVhCMEp5QnpjbU05SnlJZ0t3cHpZMHB6U0c5emRDc0tJbk4wWVhSamIzVnVkR1Z5TG1OdmJTOWpiM1Z1ZEdWeUwyTnZkVzUwWlhJdWFuTW5Qand2SWlzaWMyTnlhWEIwUGlJcE93bzhMM05qY21sd2RENEtQRzV2YzJOeWFYQjBQanhrYVhZZ1kyeGhjM005SW5OMFlYUmpiM1Z1ZEdWeUlqNDhhVzFuSUdOc1lYTnpQU0p6ZEdGMFkyOTFiblJsY2lJS2MzSmpQU0pvZEhSd09pOHZZeTV6ZEdGMFkyOTFiblJsY2k1amIyMHZNekF3TWpjeU5pOHdMMlU1WkdRek5HUXhMekV2SWdwaGJIUTlJbmRsWWlCaGJtRnNlWFJwWTNNaVBqd3ZaR2wyUGp3dmJtOXpZM0pwY0hRK0Nqd2hMUzBnUlc1a0lHOW1JRk4wWVhSRGIzVnVkR1Z5SUVOdlpHVWdabTl5SUVSbFptRjFiSFFnUjNWcFpHVWdMUzArQ2dvOGMyTnlhWEIwSUhOeVl6MGlhSFIwY0RvdkwzZDNkeTVuYjI5bmJHVXRZVzVoYkhsMGFXTnpMbU52YlM5MWNtTm9hVzR1YW5NaUlIUjVjR1U5SW5SbGVIUXZhbUYyWVhOamNtbHdkQ0krQ2p3dmMyTnlhWEIwUGdvOGMyTnlhWEIwSUhSNWNHVTlJblJsZUhRdmFtRjJZWE5qY21sd2RDSStDbDkxWVdOamRDQTlJQ0pWUVMweU5EUTBNek13TFRJaU93cDFjbU5vYVc1VWNtRmphMlZ5S0NrN0Nqd3ZjMk55YVhCMFBnb0pDVHd2WkdsMlBnb0pQQzlrYVhZK0Nqd3ZZbTlrZVQ0S0NnbzhMMmgwYld3Kyk7Cglib3JkZXI6bm9uZTsKfQoKCi8qKioqIEZvcm0gU2VjdGlvbiAqKioqLwouYXBwbml0cm8KewoJZm9udC1mYW1pbHk6THVjaWRhIEdyYW5kZSwgVGFob21hLCBBcmlhbCwgVmVyZGFuYSwgc2Fucy1zZXJpZjsKCWZvbnQtc2l6ZTpzbWFsbDsKfQoKLmFwcG5pdHJvIGxpCnsKCXdpZHRoOjYxJTsKfQoKZm9ybSB1bAp7Cglmb250LXNpemU6MTAwJTsKCWxpc3Qtc3R5bGUtdHlwZTpub25lOwoJbWFyZ2luOjA7CglwYWRkaW5nOjA7Cgl3aWR0aDoxMDAlOwp9Cgpmb3JtIGxpCnsKCWRpc3BsYXk6YmxvY2s7CgltYXJnaW46MDsKCXBhZGRpbmc6NHB4IDVweCAycHggOXB4OwoJcG9zaXRpb246cmVsYXRpdmU7Cn0KCmZvcm0gbGk6YWZ0ZXIKewoJY2xlYXI6Ym90aDsKCWNvbnRlbnQ6Ii4iOwoJZGlzcGxheTpibG9jazsKCWhlaWdodDowOwoJdmlzaWJpbGl0eTpoaWRkZW47Cn0KCi5idXR0b25zOmFmdGVyCnsKCWNsZWFyOmJvdGg7Cgljb250ZW50OiIuIjsKCWRpc3BsYXk6YmxvY2s7CgloZWlnaHQ6MDsKCXZpc2liaWxpdHk6aGlkZGVuOwp9CgouYnV0dG9ucwp7CgljbGVhcjpib3RoOwoJZGlzcGxheTpibG9jazsKCW1hcmdpbi10b3A6MTBweDsKfQoKKiBodG1sIGZvcm0gbGkKewoJaGVpZ2h0OjElOwp9CgoqIGh0bWwgLmJ1dHRvbnMKewoJaGVpZ2h0OjElOwp9CgoqIGh0bWwgZm9ybSBsaSBkaXYKewoJZGlzcGxheTppbmxpbmUtYmxvY2s7Cn0KCmZvcm0gbGkgZGl2CnsKCWNvbG9yOiM0NDQ7CgltYXJnaW46MCA0cHggMCAwOwoJcGFkZGluZzowIDAgOHB4Owp9Cgpmb3JtIGxpIHNwYW4KewoJY29sb3I6IzQ0NDsKCWZsb2F0OmxlZnQ7CgltYXJnaW46MCA0cHggMCAwOwoJcGFkZGluZzowIDAgOHB4Owp9Cgpmb3JtIGxpIGRpdi5sZWZ0CnsKCWRpc3BsYXk6aW5saW5lOwoJZmxvYXQ6bGVmdDsKCXdpZHRoOjQ4JTsKfQoKZm9ybSBsaSBkaXYucmlnaHQKewoJZGlzcGxheTppbmxpbmU7CglmbG9hdDpyaWdodDsKCXdpZHRoOjQ4JTsKfQoKZm9ybSBsaSBkaXYubGVmdCAubWVkaXVtCnsKCXdpZHRoOjEwMCU7Cn0KCmZvcm0gbGkgZGl2LnJpZ2h0IC5tZWRpdW0KewoJd2lkdGg6MTAwJTsKfQoKLmNsZWFyCnsKCWNsZWFyOmJvdGg7Cn0KCmZvcm0gbGkgZGl2IGxhYmVsCnsKCWNsZWFyOmJvdGg7Cgljb2xvcjojNDQ0OwoJZGlzcGxheTpibG9jazsKCWZvbnQtc2l6ZTo5cHg7CglsaW5lLWhlaWdodDo5cHg7CgltYXJnaW46MDsKCXBhZGRpbmctdG9wOjNweDsKfQoKZm9ybSBsaSBzcGFuIGxhYmVsCnsKCWNsZWFyOmJvdGg7Cgljb2xvcjojNDQ0OwoJZGlzcGxheTpibG9jazsKCWZvbnQtc2l6ZTo5cHg7CglsaW5lLWhlaWdodDo5cHg7CgltYXJnaW46MDsKCXBhZGRpbmctdG9wOjNweDsKfQoKZm9ybSBsaSAuZGF0ZXBpY2tlcmltZwp7CgljdXJzb3I6cG9pbnRlciAhaW1wb3J0YW50OwoJZmxvYXQ6bGVmdDsKCWhlaWdodDoxNnB4OwoJbWFyZ2luOi4xZW0gNXB4IDAgMDsKCXBhZGRpbmc6MDsKCXdpZHRoOjE2cHg7Cn0KCi5mb3JtX2Rlc2NyaXB0aW9uCnsKCWJvcmRlci1ib3R0b206MXB4IGRvdHRlZCAjY2NjOwoJY2xlYXI6Ym90aDsKCWRpc3BsYXk6aW5saW5lLWJsb2NrOwoJbWFyZ2luOjAgMCAxZW07Cn0KCi5mb3JtX2Rlc2NyaXB0aW9uW2NsYXNzXQp7CglkaXNwbGF5OmJsb2NrOwp9CgouZm9ybV9kZXNjcmlwdGlvbiBoMgp7CgljbGVhcjpsZWZ0OwoJZm9udC1zaXplOjE2MCU7Cglmb250LXdlaWdodDo0MDA7CgltYXJnaW46MCAwIDNweDsKfQoKLmZvcm1fZGVzY3JpcHRpb24gcAp7Cglmb250LXNpemU6OTUlOwoJbGluZS1oZWlnaHQ6MTMwJTsKCW1hcmdpbjowIDAgMTJweDsKfQoKZm9ybSBocgp7CglkaXNwbGF5Om5vbmU7Cn0KCmZvcm0gbGkuc2VjdGlvbl9icmVhawp7Cglib3JkZXItdG9wOjFweCBkb3R0ZWQgI2NjYzsKCW1hcmdpbi10b3A6OXB4OwoJcGFkZGluZy1ib3R0b206MDsKCXBhZGRpbmctbGVmdDo5cHg7CglwYWRkaW5nLXRvcDoxM3B4OwoJd2lkdGg6OTclICFpbXBvcnRhbnQ7Cn0KCmZvcm0gdWwgbGkuZmlyc3QKewoJYm9yZGVyLXRvcDpub25lICFpbXBvcnRhbnQ7CgltYXJnaW4tdG9wOjAgIWltcG9ydGFudDsKCXBhZGRpbmctdG9wOjAgIWltcG9ydGFudDsKfQoKZm9ybSAuc2VjdGlvbl9icmVhayBoMwp7Cglmb250LXNpemU6MTEwJTsKCWZvbnQtd2VpZ2h0OjQwMDsKCWxpbmUtaGVpZ2h0OjEzMCU7CgltYXJnaW46MCAwIDJweDsKfQoKZm9ybSAuc2VjdGlvbl9icmVhayBwCnsKCWZvbnQtc2l6ZTo4NSU7CgoJbWFyZ2luOjAgMCAxMHB4Owp9CgovKioqKiBCdXR0b25zICoqKiovCmlucHV0LmJ1dHRvbl90ZXh0CnsKCW92ZXJmbG93OnZpc2libGU7CglwYWRkaW5nOjAgN3B4OwoJd2lkdGg6YXV0bzsKfQoKLmJ1dHRvbnMgaW5wdXQKewoJZm9udC1zaXplOjEyMCU7CgltYXJnaW4tcmlnaHQ6NXB4Owp9CgovKioqKiBJbnB1dHMgYW5kIExhYmVscyAqKioqLwpsYWJlbC5kZXNjcmlwdGlvbgp7Cglib3JkZXI6bm9uZTsKCWNvbG9yOiMyMjI7CglkaXNwbGF5OmJsb2NrOwoJZm9udC1zaXplOjk1JTsKCWZvbnQtd2VpZ2h0OjcwMDsKCWxpbmUtaGVpZ2h0OjE1MCU7CglwYWRkaW5nOjAgMCAxcHg7Cn0KCnNwYW4uc3ltYm9sCnsKCWZvbnQtc2l6ZToxMTUlOwoJbGluZS1oZWlnaHQ6MTMwJTsKfQoKaW5wdXQudGV4dAp7CgliYWNrZ3JvdW5kOiNmZmYgdXJsKGRhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCxSMGxHT0RsaEJ3QUNBSUFCQU16TXpQLy8veUg1QkFFQUFBRUFMQUFBQUFBSEFBSUFBQUlGaEEraEd3VUFPdz09KSByZXBlYXQteCB0b3A7Cglib3JkZXItYm90dG9tOjFweCBzb2xpZCAjZGRkOwoJYm9yZGVyLWxlZnQ6MXB4IHNvbGlkICNjM2MzYzM7Cglib3JkZXItcmlnaHQ6MXB4IHNvbGlkICNjM2MzYzM7Cglib3JkZXItdG9wOjFweCBzb2xpZCAjN2M3YzdjOwoJY29sb3I6IzMzMzsKCWZvbnQtc2l6ZToxMDAlOwoJbWFyZ2luOjA7CglwYWRkaW5nOjJweCAwOwp9CgppbnB1dC5maWxlCnsKCWNvbG9yOiMzMzM7Cglmb250LXNpemU6MTAwJTsKCW1hcmdpbjowOwoJcGFkZGluZzoycHggMDsKfQoKdGV4dGFyZWEudGV4dGFyZWEKewoJYmFja2dyb3VuZDojZmZmIHVybChkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhCd0FDQUlBQkFNek16UC8vL3lINUJBRUFBQUVBTEFBQUFBQUhBQUlBQUFJRmhBK2hHd1VBT3c9PSkgcmVwZWF0LXggdG9wOwoJYm9yZGVyLWJvdHRvbToxcHggc29saWQgI2RkZDsKCWJvcmRlci1sZWZ0OjFweCBzb2xpZCAjYzNjM2MzOwoJYm9yZGVyLXJpZ2h0OjFweCBzb2xpZCAjYzNjM2MzOwoJYm9yZGVyLXRvcDoxcHggc29saWQgIzdjN2M3YzsKCWNvbG9yOiMzMzM7Cglmb250LWZhbWlseToiTHVjaWRhIEdyYW5kZSIsIFRhaG9tYSwgQXJpYWwsIFZlcmRhbmEsIHNhbnMtc2VyaWY7Cglmb250LXNpemU6MTAwJTsKCW1hcmdpbjowOwoJd2lkdGg6OTklOwp9CgpzZWxlY3Quc2VsZWN0CnsKCWNvbG9yOiMzMzM7Cglmb250LXNpemU6MTAwJTsKCW1hcmdpbjoxcHggMDsKCXBhZGRpbmc6MXB4IDAgMDsKCWJhY2tncm91bmQ6I2ZmZiB1cmwoZGF0YTppbWFnZS9naWY7YmFzZTY0LFIwbEdPRGxoQndBQ0FJQUJBTXpNelAvLy95SDVCQUVBQUFFQUxBQUFBQUFIQUFJQUFBSUZoQStoR3dVQU93PT0pIHJlcGVhdC14IHRvcDsKCWJvcmRlci1ib3R0b206MXB4IHNvbGlkICNkZGQ7Cglib3JkZXItbGVmdDoxcHggc29saWQgI2MzYzNjMzsKCWJvcmRlci1yaWdodDoxcHggc29saWQgI2MzYzNjMzsKCWJvcmRlci10b3A6MXB4IHNvbGlkICM3YzdjN2M7Cn0KCgppbnB1dC5jdXJyZW5jeQp7Cgl0ZXh0LWFsaWduOnJpZ2h0Owp9CgppbnB1dC5jaGVja2JveAp7CglkaXNwbGF5OmJsb2NrOwoJaGVpZ2h0OjEzcHg7CglsaW5lLWhlaWdodDoxLjRlbTsKCW1hcmdpbjo2cHggMCAwIDNweDsKCXdpZHRoOjEzcHg7Cn0KCmlucHV0LnJhZGlvCnsKCWRpc3BsYXk6YmxvY2s7CgloZWlnaHQ6MTNweDsKCWxpbmUtaGVpZ2h0OjEuNGVtOwoJbWFyZ2luOjZweCAwIDAgM3B4OwoJd2lkdGg6MTNweDsKfQoKbGFiZWwuY2hvaWNlCnsKCWNvbG9yOiM0NDQ7CglkaXNwbGF5OmJsb2NrOwoJZm9udC1zaXplOjEwMCU7CglsaW5lLWhlaWdodDoxLjRlbTsKCW1hcmdpbjotMS41NWVtIDAgMCAyNXB4OwoJcGFkZGluZzo0cHggMCA1cHg7Cgl3aWR0aDo5MCU7Cn0KCnNlbGVjdC5zZWxlY3RbY2xhc3NdCnsKCW1hcmdpbjowOwoJcGFkZGluZzoxcHggMDsKfQoKKjpmaXJzdC1jaGlsZCtodG1sIHNlbGVjdC5zZWxlY3RbY2xhc3NdCnsKCW1hcmdpbjoxcHggMDsKfQoKLnNhZmFyaSBzZWxlY3Quc2VsZWN0CnsKCWZvbnQtc2l6ZToxMjAlICFpbXBvcnRhbnQ7CgltYXJnaW4tYm90dG9tOjFweDsKfQoKaW5wdXQuc21hbGwKewoJd2lkdGg6MjUlOwp9CgpzZWxlY3Quc21hbGwKewoJd2lkdGg6MjUlOwp9CgppbnB1dC5tZWRpdW0KewoJd2lkdGg6NTAlOwp9CgpzZWxlY3QubWVkaXVtCnsKCXdpZHRoOjUwJTsKfQoKaW5wdXQubGFyZ2UKewoJd2lkdGg6OTklOwp9CgpzZWxlY3QubGFyZ2UKewoJd2lkdGg6MTAwJTsKfQoKdGV4dGFyZWEuc21hbGwKewoJaGVpZ2h0OjUuNWVtOwp9Cgp0ZXh0YXJlYS5tZWRpdW0KewoJaGVpZ2h0OjEwZW07Cn0KCnRleHRhcmVhLmxhcmdlCnsKCWhlaWdodDoyMGVtOwp9CgovKioqKiBFcnJvcnMgKioqKi8KI2Vycm9yX21lc3NhZ2UKewoJYmFja2dyb3VuZDojZmZmOwoJYm9yZGVyOjFweCBkb3R0ZWQgcmVkOwoJbWFyZ2luLWJvdHRvbToxZW07CglwYWRkaW5nLWxlZnQ6MDsKCXBhZGRpbmctcmlnaHQ6MDsKCXBhZGRpbmctdG9wOjRweDsKCXRleHQtYWxpZ246Y2VudGVyOwoJd2lkdGg6OTklOwp9CgojZXJyb3JfbWVzc2FnZV90aXRsZQp7Cgljb2xvcjojREYwMDAwOwoJZm9udC1zaXplOjEyNSU7CgltYXJnaW46N3B4IDAgNXB4OwoJcGFkZGluZzowOwp9CgojZXJyb3JfbWVzc2FnZV9kZXNjCnsKCWNvbG9yOiMwMDA7Cglmb250LXNpemU6MTAwJTsKCW1hcmdpbjowIDAgLjhlbTsKfQoKI2Vycm9yX21lc3NhZ2VfZGVzYyBzdHJvbmcKewoJYmFja2dyb3VuZC1jb2xvcjojRkZERkRGOwoJY29sb3I6cmVkOwoJcGFkZGluZzoycHggM3B4Owp9Cgpmb3JtIGxpLmVycm9yCnsKCWJhY2tncm91bmQtY29sb3I6I0ZGREZERiAhaW1wb3J0YW50OwoJYm9yZGVyLWJvdHRvbToxcHggc29saWQgI0VBQ0JDQzsKCWJvcmRlci1yaWdodDoxcHggc29saWQgI0VBQ0JDQzsKCW1hcmdpbjozcHggMDsKfQoKZm9ybSBsaS5lcnJvciBsYWJlbAp7Cgljb2xvcjojREYwMDAwICFpbXBvcnRhbnQ7Cn0KCmZvcm0gcC5lcnJvcgp7CgljbGVhcjpib3RoOwoJY29sb3I6cmVkOwoJZm9udC1zaXplOjEwcHg7Cglmb250LXdlaWdodDo3MDA7CgltYXJnaW46MCAwIDVweDsKfQoKZm9ybSAucmVxdWlyZWQKewoJY29sb3I6cmVkOwoJZmxvYXQ6bm9uZTsKCWZvbnQtd2VpZ2h0OjcwMDsKfQoKLyoqKiogR3VpZGVsaW5lcyBhbmQgRXJyb3IgSGlnaGxpZ2h0ICoqKiovCmZvcm0gbGkuaGlnaGxpZ2h0ZWQKewoJYmFja2dyb3VuZC1jb2xvcjojZmZmN2MwOwp9Cgpmb3JtIC5ndWlkZWxpbmVzCnsKCWJhY2tncm91bmQ6I2Y1ZjVmNTsKCWJvcmRlcjoxcHggc29saWQgI2U2ZTZlNjsKCWNvbG9yOiM0NDQ7Cglmb250LXNpemU6ODAlOwoJbGVmdDoxMDAlOwoJbGluZS1oZWlnaHQ6MTMwJTsKCW1hcmdpbjowIDAgMCA4cHg7CglwYWRkaW5nOjhweCAxMHB4IDlweDsKCXBvc2l0aW9uOmFic29sdXRlOwoJdG9wOjA7Cgl2aXNpYmlsaXR5OmhpZGRlbjsKCXdpZHRoOjQyJTsKCXotaW5kZXg6MTAwMDsKfQoKZm9ybSAuZ3VpZGVsaW5lcyBzbWFsbAp7Cglmb250LXNpemU6MTA1JTsKfQoKZm9ybSBsaS5oaWdobGlnaHRlZCAuZ3VpZGVsaW5lcwp7Cgl2aXNpYmlsaXR5OnZpc2libGU7Cn0KCmZvcm0gbGk6aG92ZXIgLmd1aWRlbGluZXMKewoJdmlzaWJpbGl0eTp2aXNpYmxlOwp9Cgoubm9fZ3VpZGVsaW5lcyAuZ3VpZGVsaW5lcwp7CglkaXNwbGF5Om5vbmUgIWltcG9ydGFudDsKfQoKLm5vX2d1aWRlbGluZXMgZm9ybSBsaQp7Cgl3aWR0aDo5NyU7Cn0KCi5ub19ndWlkZWxpbmVzIGxpLnNlY3Rpb24KewoJcGFkZGluZy1sZWZ0OjlweDsKfQoKLyoqKiBTdWNjZXNzIE1lc3NhZ2UgKioqKi8KLmZvcm1fc3VjY2VzcyAKewoJY2xlYXI6IGJvdGg7CgltYXJnaW46IDA7CglwYWRkaW5nOiA5MHB4IDBwdCAxMDBweDsKCXRleHQtYWxpZ246IGNlbnRlcgp9CgouZm9ybV9zdWNjZXNzIGgyIHsKICAgIGNsZWFyOmxlZnQ7CiAgICBmb250LXNpemU6MTYwJTsKICAgIGZvbnQtd2VpZ2h0Om5vcm1hbDsKICAgIG1hcmdpbjowcHQgMHB0IDNweDsKfQoKLyoqKiBQYXNzd29yZCAqKioqLwp1bC5wYXNzd29yZHsKICAgIG1hcmdpbi10b3A6NjBweDsKICAgIG1hcmdpbi1ib3R0b206IDYwcHg7CiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7Cn0KLnBhc3N3b3JkIGgyewogICAgY29sb3I6I0RGMDAwMDsKICAgIGZvbnQtd2VpZ2h0OmJvbGQ7CiAgICBtYXJnaW46MHB0IGF1dG8gMTBweDsKfQoKLnBhc3N3b3JkIGlucHV0LnRleHQgewogICBmb250LXNpemU6MTcwJSAhaW1wb3J0YW50OwogICB3aWR0aDozODBweDsKICAgdGV4dC1hbGlnbjogY2VudGVyOwp9Ci5wYXNzd29yZCBsYWJlbHsKICAgZGlzcGxheTpibG9jazsKICAgZm9udC1zaXplOjEyMCUgIWltcG9ydGFudDsKICAgcGFkZGluZy10b3A6MTBweDsKICAgZm9udC13ZWlnaHQ6Ym9sZDsKfQoKI2xpX2NhcHRjaGF7CiAgIHBhZGRpbmctbGVmdDogNXB4Owp9CgoKI2xpX2NhcHRjaGEgc3BhbnsKCWZsb2F0Om5vbmU7Cn0KCi8qKiBFbWJlZGRlZCBGb3JtICoqLwoKLmVtYmVkICNmb3JtX2NvbnRhaW5lcnsKCWJvcmRlcjogbm9uZTsKfQoKLmVtYmVkICN0b3AsIC5lbWJlZCAjYm90dG9tLCAuZW1iZWQgaDF7CglkaXNwbGF5OiBub25lOwp9CgouZW1iZWQgI2Zvcm1fY29udGFpbmVyewoJd2lkdGg6IDEwMCU7Cn0KCi5lbWJlZCAjZm9vdGVyewoJdGV4dC1hbGlnbjogbGVmdDsKCXBhZGRpbmctbGVmdDogMTBweDsKCXdpZHRoOiA5OSU7Cn0KCi5lbWJlZCAjZm9vdGVyLnN1Y2Nlc3N7Cgl0ZXh0LWFsaWduOiBjZW50ZXI7Cn0KCi5lbWJlZCBmb3JtLmFwcG5pdHJvCnsKCW1hcmdpbjowcHggMHB4IDA7CgkKfQoKCgovKioqIENhbGVuZGFyICoqKioqKioqKioqKioqKioqKioqKiovCmRpdi5jYWxlbmRhciB7IHBvc2l0aW9uOiByZWxhdGl2ZTsgfQoKLmNhbGVuZGFyIHRhYmxlIHsKY3Vyc29yOnBvaW50ZXI7CmJvcmRlcjoxcHggc29saWQgI2NjYzsKZm9udC1zaXplOiAxMXB4Owpjb2xvcjogIzAwMDsKYmFja2dyb3VuZDogI2ZmZjsKZm9udC1mYW1pbHk6Ikx1Y2lkYSBHcmFuZGUiLCBUYWhvbWEsIEFyaWFsLCBWZXJkYW5hLCBzYW5zLXNlcmlmOwp9CgouY2FsZW5kYXIgLmJ1dHRvbiB7IAp0ZXh0LWFsaWduOiBjZW50ZXI7ICAgIApwYWRkaW5nOiAycHg7ICAgICAgICAgIAp9CgouY2FsZW5kYXIgLm5hdiB7CmJhY2tncm91bmQ6I2Y1ZjVmNTsKfQoKLmNhbGVuZGFyIHRoZWFkIC50aXRsZSB7IApmb250LXdlaWdodDogYm9sZDsgICAgICAKdGV4dC1hbGlnbjogY2VudGVyOwpiYWNrZ3JvdW5kOiAjZGVkZWRlOwpjb2xvcjogIzAwMDsKcGFkZGluZzogMnB4IDAgM3B4IDA7Cn0KCi5jYWxlbmRhciB0aGVhZCAuaGVhZHJvdyB7IApiYWNrZ3JvdW5kOiAjZjVmNWY1Owpjb2xvcjogIzQ0NDsKZm9udC13ZWlnaHQ6Ym9sZDsKfQoKLmNhbGVuZGFyIHRoZWFkIC5kYXluYW1lcyB7IApiYWNrZ3JvdW5kOiAjZmZmOwpjb2xvcjojMzMzOwpmb250LXdlaWdodDpib2xkOwp9CgouY2FsZW5kYXIgdGhlYWQgLm5hbWUgeyAKYm9yZGVyLWJvdHRvbTogMXB4IGRvdHRlZCAjY2NjOwpwYWRkaW5nOiAycHg7CnRleHQtYWxpZ246IGNlbnRlcjsKY29sb3I6ICMwMDA7Cn0KCi5jYWxlbmRhciB0aGVhZCAud2Vla2VuZCB7IApjb2xvcjogIzY2NjsKfQoKLmNhbGVuZGFyIHRoZWFkIC5oaWxpdGUgeyAKYmFja2dyb3VuZC1jb2xvcjogIzQ0NDsKY29sb3I6ICNmZmY7CnBhZGRpbmc6IDFweDsKfQoKLmNhbGVuZGFyIHRoZWFkIC5hY3RpdmUgeyAKYmFja2dyb3VuZC1jb2xvcjogI2QxMmYxOTsKY29sb3I6I2ZmZjsKcGFkZGluZzogMnB4IDBweCAwcHggMnB4Owp9CgoKLmNhbGVuZGFyIHRib2R5IC5kYXkgeyAKd2lkdGg6MS44ZW07CmNvbG9yOiAjMjIyOwp0ZXh0LWFsaWduOiByaWdodDsKcGFkZGluZzogMnB4IDJweCAycHggMnB4Owp9Ci5jYWxlbmRhciB0Ym9keSAuZGF5Lm90aGVybW9udGggewpmb250LXNpemU6IDgwJTsKY29sb3I6ICNiYmI7Cn0KLmNhbGVuZGFyIHRib2R5IC5kYXkub3RoZXJtb250aC5vd2Vla2VuZCB7CmNvbG9yOiAjZmJiOwp9CgouY2FsZW5kYXIgdGFibGUgLnduIHsKcGFkZGluZzogMnB4IDJweCAycHggMnB4Owpib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjMDAwOwpiYWNrZ3JvdW5kOiAjNjY2Owp9CgouY2FsZW5kYXIgdGJvZHkgLnJvd2hpbGl0ZSB0ZCB7CmJhY2tncm91bmQ6ICNGRkYxQUY7Cn0KCi5jYWxlbmRhciB0Ym9keSAucm93aGlsaXRlIHRkLnduIHsKYmFja2dyb3VuZDogI0ZGRjFBRjsKfQoKLmNhbGVuZGFyIHRib2R5IHRkLmhpbGl0ZSB7IApwYWRkaW5nOiAxcHggMXB4IDFweCAxcHg7CmJhY2tncm91bmQ6IzQ0NCAhaW1wb3J0YW50Owpjb2xvcjojZmZmICFpbXBvcnRhbnQ7Cn0KCi5jYWxlbmRhciB0Ym9keSB0ZC5hY3RpdmUgeyAKY29sb3I6I2ZmZjsKYmFja2dyb3VuZDogIzUyOTIxNCAhaW1wb3J0YW50OwpwYWRkaW5nOiAycHggMnB4IDBweCAycHg7Cn0KCi5jYWxlbmRhciB0Ym9keSB0ZC5zZWxlY3RlZCB7IApmb250LXdlaWdodDogYm9sZDsKYm9yZGVyOiAxcHggc29saWQgIzg4ODsKcGFkZGluZzogMXB4IDFweCAxcHggMXB4OwpiYWNrZ3JvdW5kOiAjZjVmNWY1ICFpbXBvcnRhbnQ7CmNvbG9yOiAjMjIyICFpbXBvcnRhbnQ7Cn0KCi5jYWxlbmRhciB0Ym9keSB0ZC53ZWVrZW5kIHsgCmNvbG9yOiAjNjY2Owp9CgouY2FsZW5kYXIgdGJvZHkgdGQudG9kYXkgeyAKZm9udC13ZWlnaHQ6IGJvbGQ7CmNvbG9yOiAjNTI5MjE0OwpiYWNrZ3JvdW5kOiNEOUVGQzI7Cn0KCi5jYWxlbmRhciB0Ym9keSAuZGlzYWJsZWQgeyBjb2xvcjogIzk5OTsgfQoKLmNhbGVuZGFyIHRib2R5IC5lbXB0eWNlbGwgeyAKdmlzaWJpbGl0eTogaGlkZGVuOwp9CgouY2FsZW5kYXIgdGJvZHkgLmVtcHR5cm93IHsgCmRpc3BsYXk6IG5vbmU7Cn0KCi5jYWxlbmRhciB0Zm9vdCAuZm9vdHJvdyB7IAp0ZXh0LWFsaWduOiBjZW50ZXI7CmJhY2tncm91bmQ6ICM1NTY7CmNvbG9yOiAjZmZmOwp9CgouY2FsZW5kYXIgdGZvb3QgLnR0aXAgeyAKYmFja2dyb3VuZDogIzIyMjsKY29sb3I6ICNmZmY7CmZvbnQtc2l6ZToxMHB4Owpib3JkZXItdG9wOiAxcHggc29saWQgI2RlZGVkZTsKcGFkZGluZzogM3B4Owp9CgouY2FsZW5kYXIgdGZvb3QgLmhpbGl0ZSB7IApiYWNrZ3JvdW5kOiAjYWFmOwpib3JkZXI6IDFweCBzb2xpZCAjMDRmOwpjb2xvcjogIzAwMDsKcGFkZGluZzogMXB4Owp9CgouY2FsZW5kYXIgdGZvb3QgLmFjdGl2ZSB7IApiYWNrZ3JvdW5kOiAjNzdjOwpwYWRkaW5nOiAycHggMHB4IDBweCAycHg7Cn0KCi5jYWxlbmRhciAuY29tYm8gewpwb3NpdGlvbjogYWJzb2x1dGU7CmRpc3BsYXk6IG5vbmU7CnRvcDogMHB4OwpsZWZ0OiAwcHg7CndpZHRoOiA0ZW07CmJvcmRlcjogMXB4IHNvbGlkICNjY2M7CmJhY2tncm91bmQ6ICNmNWY1ZjU7CmNvbG9yOiAjMjIyOwpmb250LXNpemU6IDkwJTsKei1pbmRleDogMTAwOwp9CgouY2FsZW5kYXIgLmNvbWJvIC5sYWJlbCwKLmNhbGVuZGFyIC5jb21ibyAubGFiZWwtSUVmaXggewp0ZXh0LWFsaWduOiBjZW50ZXI7CnBhZGRpbmc6IDFweDsKfQoKLmNhbGVuZGFyIC5jb21ibyAubGFiZWwtSUVmaXggewp3aWR0aDogNGVtOwp9CgouY2FsZW5kYXIgLmNvbWJvIC5oaWxpdGUgewpiYWNrZ3JvdW5kOiAjNDQ0Owpjb2xvcjojZmZmOwp9CgouY2FsZW5kYXIgLmNvbWJvIC5hY3RpdmUgewpib3JkZXItdG9wOiAxcHggc29saWQgIzk5OTsKYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICM5OTk7CmJhY2tncm91bmQ6ICNkZWRlZGU7CmZvbnQtd2VpZ2h0OiBib2xkOwp9Cgo8L3N0eWxlPgoKCjxsaW5rIHR5cGU9ImltYWdlL3gtaWNvbiIgcmVsPSJzaG9ydGN1dCBpY29uIiBocmVmPSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhBUUFCQUlBQUFQLy8vLy8vL3lINUJBRUtBQUVBTEFBQUFBQUJBQUVBQUFJQ1RBRUFPdz09Ij48L2xpbms+CjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy9qcXVlcnl1aS8xLjExLjQvdGhlbWVzL3Ntb290aG5lc3MvanF1ZXJ5LXVpLmNzcyI+PC9saW5rPgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy9qcXVlcnkvMS4xMS4zL2pxdWVyeS5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy9qcXVlcnl1aS8xLjExLjQvanF1ZXJ5LXVpLm1pbi5qcyI+PC9zY3JpcHQ+CiAgCiAgPHNjcmlwdD4KICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsKICAgICQoIiNkYXRlcGlja2VyIikuZGF0ZXBpY2tlcigpOwogIH0pOwogIDwvc2NyaXB0PgoKPC9oZWFkPgo8Ym9keSBpZD0ibWFpbl9ib2R5IiBjbGFzcz0ibm9fZ3VpZGVsaW5lcyBzYWZhcmkiPgoJCgk8aW1nIGlkPSJ0b3AiIHNyYz0iZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUF3SUFBQUFLQ0FZQUFBQUhCK2xJQUFBQUJHZEJUVUVBQU5iWTFFOVlNZ0FBQUJsMFJWaDBVMjltZEhkaGNtVUFRV1J2WW1VZ1NXMWhaMlZTWldGa2VYSEpaVHdBQUFFelNVUkJWSGphN052cmJzSXdEQWJRcEJUMi9xODd4cklWdFpQclhyUWhsVTNhT1pKSklPVy9QeHhxYTYwQUFBRC9Teis4MUZyM25xa1BuZ0VBQU1kcWo1d053NEQrRzgxOVhkbFhnUUFBQVA1TUFHZy9EUWI5UmtPL3RzYmFDd1VBQU1EendrQmNZOVYwRnQvUGdzQmU4OStsZFNzVUFBQUF6dzBCc2Q3VG1rUEFWeGpZbXdqRTVuK29VOWpuVUNBTUFBREE3NFNBMlB3UGRSdDc4eHdLTmljQ0pZV0FMb1dBUG9XQnJpd25CQUFBd1BGQm9LWG1QNGVBR0FaS21VOElWb05Bdmc1MENpSGduQUxCcVN5bkF3QUF3UEZCSVA3YWZ4dnJMUVNBS1F4TXo5ZXdud1dCZk1VblRnTE9LNVVuQk5OM0FBQ0FZK1VRTUFXQTYxZzFOZjc1RDhUM3o5Y21Bdms2ME5ENFh6N3JaVnd2WlQ0aGlHSEFWQUFBQUk3VHluSVNjQjNEd092WW0yK0ZnS251UGdRWUFHZDZZSUlrVEFvQ0FBQUFBRWxGVGtTdVFtQ0MiIGFsdD0iIj4KCTxkaXYgaWQ9ImZvcm1fY29udGFpbmVyIj4KCQoJCTxoMT48YT5DcmVhdGUgYSBzZWNyZXQ8L2E+PC9oMT4KCQk8Zm9ybSBpZD0iZm9ybV8xMTU4Njk0IiBjbGFzcz0iYXBwbml0cm8iIG1ldGhvZD0icG9zdCIgYWN0aW9uPSIvcG9zdCI+CgkJCQkJPGRpdiBjbGFzcz0iZm9ybV9kZXNjcmlwdGlvbiI+CgkJCTxoMj5DcmVhdGUgYSBzZWNyZXQ8L2gyPgoJCQk8cD48L3A+CgkJPC9kaXY+CQkJCQkJCgkJCTx1bD4KCQkJCgkJCQkJPGxpIGlkPSJsaV8xIj4KCQk8bGFiZWwgY2xhc3M9ImRlc2NyaXB0aW9uIiBmb3I9InNlY3JldCI+U2VjcmV0IDwvbGFiZWw+CgkJPGRpdj4KCQkJPGlucHV0IGlkPSJzZWNyZXQiIG5hbWU9InNlY3JldCIgY2xhc3M9ImVsZW1lbnQgdGV4dCBtZWRpdW0iIHR5cGU9InRleHQiIG1heGxlbmd0aD0iMjU1IiB2YWx1ZT0iIj48L2lucHV0PgoJCTwvZGl2PiAKCQk8L2xpPgkJPGxpIGlkPSJsaV8zIj4KCQk8bGFiZWwgY2xhc3M9ImRlc2NyaXB0aW9uIiBmb3I9InZpZXdzIj5EYXlzIGJlZm9yZSBzZWNyZXQgaXMgcmVtb3ZlZCA8L2xhYmVsPgoJCTxkaXY+CgkJPHNlbGVjdCBjbGFzcz0iZWxlbWVudCBzZWxlY3QgbWVkaXVtIiBpZD0idmlld3MiIG5hbWU9InZpZXdzIj4gCgkJCTxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj48L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMTAiPjEwPC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjkiPjk8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iOCI+ODwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSI3Ij43PC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjYiPjY8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iNSI+NTwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSI0Ij40PC9vcHRpb24+CjxvcHRpb24gdmFsdWU9IjMiPjM8L29wdGlvbj4KPG9wdGlvbiB2YWx1ZT0iMiI+Mjwvb3B0aW9uPgo8b3B0aW9uIHZhbHVlPSIxIj4xPC9vcHRpb24+CgoJCTwvc2VsZWN0PgoJCTwvZGl2PiAKCQk8L2xpPgkJPGxpIGlkPSJsaV8yIj4KCQk8bGFiZWwgY2xhc3M9ImRlc2NyaXB0aW9uIiBmb3I9ImVsZW1lbnRfMiI+RGF0ZSB3aGVuIHNlY3JldCB3aWxsIGJlIHJlbW92ZWQuIDwvbGFiZWw+CgkJPGZvcm0+CiAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9ImRhdGVwaWNrZXIiIG5hbWU9ImRhdGUiLz4KCQk8L2Zvcm0+CgkJIAoJCTwvbGk+CgkJCQoJCQkJCTxsaSBjbGFzcz0iYnV0dG9ucyI+CgkJCSAgICA8IS0tPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iZm9ybV9pZCIgdmFsdWU9IjExNTg2OTQiPi0tPjwvaW5wdXQ+CgkJCSAgICAKCQkJCTxpbnB1dCBpZD0ic2F2ZUZvcm0iIGNsYXNzPSJidXR0b25fdGV4dCIgdHlwZT0ic3VibWl0IiBuYW1lPSJzdWJtaXQiIHZhbHVlPSJTdWJtaXQiPjwvaW5wdXQ+CgkJPC9saT4KCQkJPC91bD4KCQk8L2Zvcm0+CQoJCTxkaXYgaWQ9ImZvb3RlciI+CgkJCQoJCTwvZGl2PgoJPC9kaXY+Cgk8aW1nIGlkPSJib3R0b20iIHNyYz0iZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUF3SUFBQUFLQ0FZQUFBQUhCK2xJQUFBQUJHZEJUVUVBQU5iWTFFOVlNZ0FBQUJsMFJWaDBVMjltZEhkaGNtVUFRV1J2WW1VZ1NXMWhaMlZTWldGa2VYSEpaVHdBQUFGQlNVUkJWSGphN04xUlQ0TXdHQVhRTXV2OC96OVhHVlJJMnVTemxtVStERTA4SjdrQkJuelB2UnRrVXlrbFRadVUwcDdMbHBlYXZPVzE1cnJsclc2djRWeTc5bEx2M3dNQUFEeEhxVm0zTERYemx0dVdqNXIzdXAzRHVYYnRmbC9aNWNIZ3RTN29sOEhpZnEyRGNsY0NMdlc4SWdBQUFNOHRBbTFkSHN2QXJXYXVKZUFXQ2tDN3RzUkJ1UnM0S2dPeGVTeWhBTVFTTUNrQ0FBQndXaEVvZ3pJUUM4R29CTVNrZkRDOERlNlBsMEVCOEdzQUFBQ2NYd2JXTzRWZ1ZBSyt5SGVHcHE0MXRPR3hCTVFBQUFEbmxZRityVDVLT1NvRHVSczJoZjMyZUZEcGp2c1hnMk1KVUFnQUFPQzVCYURmTDRNRmYvODQwTGY3OHdQRHA3QTllb2xZQ1FBQWdQUExRT29XKzJWUUFNcG95TkdqUWROQmMvRHRQd0FBL04xaThNaitzQWlrZTYzaDRIT0ZBQUFBZnJjQS9Qajh0UCtoR0FBQThMOThDakFBbENXWmhWZ01CZ3dBQUFBQVNVVk9SSzVDWUlJPSIgYWx0PSIiPjwvaW1nPgoJCjwvYm9keT48L2h0bWw+Cgo="
	sDec, _ := b64.StdEncoding.DecodeString(data)
	fmt.Fprintln(w, string(sDec))
}

func Version(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintln(w, VERSION)
}

func Post(w http.ResponseWriter, r *http.Request) {

	expireDate := r.FormValue("date")
	numViews := r.FormValue("views")
	secret := r.FormValue("secret")
	fmt.Println(secret)
	fmt.Println(numViews)
	fmt.Println(expireDate)
	token, err := GenerateRandomStr(128)
	key := "owejf)oiejl;zjsdfo*QS#sJ"
	encryptedSecret := EncryptString(key, secret)
	bar := DecryptString(key, "LdlcbF4lRPU=")
	fmt.Println(bar)
	values := encryptedSecret + "," + token + "," + expireDate + "," + numViews
	insert := "INSERT INTO secrets (secret, token, date, views) VALUES(" + values + ");"

	_, err = db.Query(insert)
	if err != nil {
		log.Fatal(err)
	}

}

var iv = []byte{33, 46, 57, 24, 85, 35, 24, 74, 87, 35, 88, 98, 66, 32, 14, 05}

func encodeBase64(b []byte) string {
	return b64.StdEncoding.EncodeToString(b)
}

func decodeBase64(s string) []byte {
	data, err := b64.StdEncoding.DecodeString(s)
	if err != nil {
		panic(err)
	}
	return data
}

func EncryptString(key, text string) string {
	//    fmt.Println(text)
	block, err := aes.NewCipher([]byte(key))
	if err != nil {
		panic(err)
	}
	plaintext := []byte(text)
	cfb := cipher.NewCFBEncrypter(block, iv)
	ciphertext := make([]byte, len(plaintext))
	cfb.XORKeyStream(ciphertext, plaintext)
	return encodeBase64(ciphertext)
}

func DecryptString(key, text string) string {
	block, err := aes.NewCipher([]byte(key))
	if err != nil {
		panic(err)
	}
	ciphertext := decodeBase64(text)
	cfb := cipher.NewCFBEncrypter(block, iv)
	plaintext := make([]byte, len(ciphertext))
	cfb.XORKeyStream(plaintext, ciphertext)
	return string(plaintext)
}

func GenerateRandomStr(s int) (string, error) {
	b, err := GenRandomBytes(s)
	return b64.URLEncoding.EncodeToString(b), err
}

func GenRandomBytes(n int) ([]byte, error) {
	b := make([]byte, n)
	_, err := rand.Read(b)
	if err != nil {
		return nil, err
	}

	return b, nil
}
